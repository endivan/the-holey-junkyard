/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package checkpoint;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import javax.sound.sampled.*;
import javax.swing.JOptionPane;

/**
 *
 * @author Administrator
 */
public class Checkpoint extends javax.swing.JFrame {

    private static ArrayList<Integer> checkpoints = new ArrayList<>();
    private static int DEBUG_CONST = 1000;
    private static final long serialVersionUID = 1L;

    /**
     * Creates new form Checkpoint
     */
    public Checkpoint() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        enterChecksLabel = new javax.swing.JLabel();
        addField = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        checkpointsScrollPane = new javax.swing.JScrollPane();
        checkpointsArea = new javax.swing.JTextArea();
        startButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        enterChecksLabel.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        enterChecksLabel.setText("Enter checkpoint times: (in minutes)");

        addField.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        addField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFieldActionPerformed(evt);
            }
        });

        addButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        checkpointsArea.setColumns(20);
        checkpointsArea.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        checkpointsArea.setLineWrap(true);
        checkpointsArea.setRows(5);
        checkpointsArea.setEnabled(false);
        checkpointsScrollPane.setViewportView(checkpointsArea);

        startButton.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkpointsScrollPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(enterChecksLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(148, 148, 148)
                        .addComponent(startButton, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                        .addGap(148, 148, 148)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(enterChecksLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addButton)
                    .addComponent(addField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(checkpointsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(startButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Commences the emergency sequence.
     *
     * This method commences the emergency sequence, which consists of playing
     * an alarm sound and may include other actions.
     */
    private void commenceEmergencySequence49131() {
        preloadedPlay("alarm.wav");
    }

    /**
     * Gets the duration of a .wav file.
     * @param file the .wav audio file
     * @return the duration of the audio file
     */
    static double getDurationWav(File file) {

        //first get a stream of audio representing audio file
        try (AudioInputStream stream = AudioSystem.getAudioInputStream(file)) {

            //then, based on its technical specifications, calculate length
            //this is the part where only .wav, .aiff, or. au files are supported
            AudioFormat format = stream.getFormat();
            return (file.length() / format.getSampleRate() / (format.getSampleSizeInBits() / 8.0) / format.getChannels()) * 1000;

            //catch exceptions
        } catch (UnsupportedAudioFileException | IOException ex) {
            System.err.printf("An exception occurred! %d", ex.toString());
            return -1;
        }
    }

    /**
     * Loads and plays a .wav audio file.
     * @param filePath the filepath of the .wav audio file
     */
    public static void preloadedPlay(final String filePath) {
        Path path = Paths.get(filePath);
        File file = path.toFile();

        //if path is correct, file is audio, etc... (see the 'isFileSupported(file)'
        //method)
        Clip clip = null;
        if (isFileSupported(file)) {
            try {
                //get a 'Clip' (a Clip is a type of output, where you first load
                //the entire file and then play it)
                clip = AudioSystem.getClip();

                //feed the file into the clip
                clip.open(AudioSystem.getAudioInputStream(file));

                //add a 'listener' to 'listen' for the end of the file
                clip.addLineListener(new LineListener() {
                    @Override
                    public void update(LineEvent event) {
                        if (event.getType() == LineEvent.Type.STOP) {
                            event.getLine().close();
                        }
                    }
                });

                //start playing sound
                clip.start();

                //wait for sound to end, and then return
                Thread.sleep((long) getDurationWav(file));

                //catch exceptions
            } catch (LineUnavailableException | IOException | UnsupportedAudioFileException | InterruptedException ex) {
                clip.stop();
                clip.close();
            } //end try-catch
        } //end if
    }

    /**
     * Checks if the audio file is supported.
     * @param file the audio file
     * @return whether the file is supported
     */
    static boolean isFileSupported(File file) {
        try {
            AudioFileFormat form = AudioSystem.getAudioFileFormat(file);
            if ((form.getType() == AudioFileFormat.Type.WAVE) || (form.getType() == AudioFileFormat.Type.AU) || (form.getType() == AudioFileFormat.Type.AIFF)) {
                return true;
            } else {
                return false;
            }
        } catch (UnsupportedAudioFileException | IOException ex) {
            System.err.printf("An exception occurred! %d", ex.toString());
            return false;
        }
    }

    /**
     * Starts a timeout thread.
     *
     * If timed out, the thread will commence emergency sequence 49131
     * @see #commenceEmergencySequence49131()
     * @return the timeout thread
     */
    private Thread startTimer() {
        Thread t = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    Thread.sleep(5 * DEBUG_CONST);
                    commenceEmergencySequence49131();
                } catch (InterruptedException ex) {
                }
            }
        });
        t.start();
        return t;
    }

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        try {
            int mints = Integer.parseInt(addField.getText());
            if (mints <= 0) {
                JOptionPane.showMessageDialog(this, "Positive numbers only!", "Invalid Input", JOptionPane.WARNING_MESSAGE);
                return;
            }
            checkpoints.add(mints);
            checkpointsArea.append("Checkpoint #" + checkpoints.size() + ": " + addField.getText() + " minutes \n");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Please enter numbers only!", "Invalid Input", JOptionPane.WARNING_MESSAGE);
        } finally {
            addField.setText("");
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        this.setVisible(false);
        for (int i = 0; i < checkpoints.size(); i++) {
            try {
                Thread.sleep(checkpoints.get(i) * DEBUG_CONST);
                Thread t = startTimer();
                int opt = JOptionPane.showConfirmDialog(this, "Have you reached Checkpoint# " + (i + 1),
                        "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                t.interrupt();
                while (opt == 1) {
                    Thread.sleep(3 * DEBUG_CONST);
                    t = startTimer();
                    opt = JOptionPane.showConfirmDialog(this, "Have you reached Checkpoint# " + (i + 1),
                            "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                    t.interrupt();
                }
            } catch (InterruptedException e) {
                System.err.println("Interrupted!");
            }
        }
        JOptionPane.showMessageDialog(this, "Congratulations on reaching safely!", "Congrats", JOptionPane.INFORMATION_MESSAGE);
        System.exit(0);
    }//GEN-LAST:event_startButtonActionPerformed

    private void addFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFieldActionPerformed
        addButtonActionPerformed(evt);
    }//GEN-LAST:event_addFieldActionPerformed

    /**
     * The main method
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Checkpoint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Checkpoint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Checkpoint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Checkpoint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Checkpoint().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTextField addField;
    private javax.swing.JTextArea checkpointsArea;
    private javax.swing.JScrollPane checkpointsScrollPane;
    private javax.swing.JLabel enterChecksLabel;
    private javax.swing.JButton startButton;
    // End of variables declaration//GEN-END:variables
}
