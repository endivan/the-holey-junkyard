/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class SimpleNode implements Node {

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected GoDlangParser parser;

  // custom fields
  public String name;
  public Type type;
  public int lineno;

  public enum Type {
      NUM ("a number", "double", 1),
      TEXT ("text", "StringBuilder", 2),
      LIST ("a list", "ArrayList<Object>", 3),
      ACT ("an action", null, 4);

      public String GoDlangWord;
      public String javaWord;
      public int typeno;

      Type(String glw, String jw, int tn) {
          GoDlangWord = glw;
          javaWord = jw;
          typeno = tn;
      }
  }
  public static java.util.HashMap<String, Integer> symb_types = new java.util.HashMap<>();

  public SimpleNode(int i) {
    id = i;
  }

  public SimpleNode(GoDlangParser p, int i) {
    this(i);
    parser = p;
  }

  public void jjtOpen() {
  }

  public void jjtClose() {
  }

  public void jjtSetParent(Node n) { parent = n; }
  public Node jjtGetParent() { return parent; }

  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  public Node jjtGetChild(int i) {
    return children[i];
  }

  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  public String toString() {
    return GoDlangParserTreeConstants.jjtNodeName[id];
  }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }

  public int getId() {
    return id;
  }

  // custom methods

  public void output(int indent, String str) {
      for (int i = 0; i < indent; i++) {
          System.out.print("    ");
      }
      System.out.print(str);
  }

  public void translate(int indent) throws UnsupportedOperationException {
      // should never be called
      throw new UnsupportedOperationException("Someone forgot to override 'translate'!");
  }

  public void semanticCheck() throws ParseException {
      // should never be called
      throw new UnsupportedOperationException("Someone forgot to override 'semanticCheck'!");
  }
}

/* JavaCC - OriginalChecksum=0b28d845c2352abd48998269497ed5a6 (do not edit this line) */
