/* Generated By:JJTree: Do not edit this line. ASTaction.java Version 6.1 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public class ASTaction extends SimpleNode {
//    public ArrayList<Type> params = new ArrayList<>();
//    public ArrayList<String> locals = new ArrayList<>();
    public int returnType;

    public java.util.HashMap<String, Integer> params = new java.util.HashMap<>();
    public int numParams;

    public ASTaction(int id) {
        super(id);
    }
  
    public ASTaction(GoDlangParser p, int id) {
        super(p, id);
    }
  
    public void translate(int indent) throws UnsupportedOperationException {
        output(indent, "public Object " + name + "(");
        if (numParams > 0) {
            ((SimpleNode) jjtGetChild(0)).translate(0);
        }
        for (int i = 1; i < numParams; i++) {
            output(0, ", ");
            ((SimpleNode) jjtGetChild(i)).translate(0);
        }
        output(0, ") {\n");
        indent++;
        for (int i = numParams; i < jjtGetNumChildren(); i++) {
            ((SimpleNode) jjtGetChild(i)).translate(indent);
        }
        indent--;
        output(indent, "}\n");
    }

    public void semanticCheck() throws ParseException, UnsupportedOperationException {
        Integer res = symb_types.putIfAbsent(name, (type.typeno << 16) + lineno); 
        if (res != null) {
            int resType = res.intValue() >> 16;
            int resLineno = res.intValue() - (resType << 16);
            throw new ParseException("Redefining " + name + "!\n"
                    + "  Old definition at line " + resLineno
                    + ", new definition at line " + lineno + ".");
        }
        for (int i = 0; i < jjtGetNumChildren(); i++) {
            ((SimpleNode) jjtGetChild(i)).semanticCheck();
        }
        // do later: check body for return type, usage of locals
    }
}
/* JavaCC - OriginalChecksum=7274d44486f9d09500185d9962c64dcc (do not edit this line) */
